// Code generated by MockGen. DO NOT EDIT.
// Source: maclist.go

// Package mock_maclist is a generated GoMock package.
package mock_maclist

import (
	context "context"
	reflect "reflect"

	maclist "github.com/canflyx/gosw/apps/maclist"
	switches "github.com/canflyx/gosw/apps/switches"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// QueryMacList mocks base method.
func (m *MockService) QueryMacList(ctx context.Context, req *maclist.QueryMacRequest) (*maclist.MacSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMacList", ctx, req)
	ret0, _ := ret[0].(*maclist.MacSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMacList indicates an expected call of QueryMacList.
func (mr *MockServiceMockRecorder) QueryMacList(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMacList", reflect.TypeOf((*MockService)(nil).QueryMacList), ctx, req)
}

// SaveAll mocks base method.
func (m *MockService) SaveAll(ctx context.Context, sw *switches.Switches) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAll", ctx, sw)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAll indicates an expected call of SaveAll.
func (mr *MockServiceMockRecorder) SaveAll(ctx, sw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAll", reflect.TypeOf((*MockService)(nil).SaveAll), ctx, sw)
}

// ScanSwitch mocks base method.
func (m *MockService) ScanSwitch(arg0 context.Context, arg1 []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanSwitch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanSwitch indicates an expected call of ScanSwitch.
func (mr *MockServiceMockRecorder) ScanSwitch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanSwitch", reflect.TypeOf((*MockService)(nil).ScanSwitch), arg0, arg1)
}

// MockRepositoryer is a mock of Repositoryer interface.
type MockRepositoryer struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryerMockRecorder
}

// MockRepositoryerMockRecorder is the mock recorder for MockRepositoryer.
type MockRepositoryerMockRecorder struct {
	mock *MockRepositoryer
}

// NewMockRepositoryer creates a new mock instance.
func NewMockRepositoryer(ctrl *gomock.Controller) *MockRepositoryer {
	mock := &MockRepositoryer{ctrl: ctrl}
	mock.recorder = &MockRepositoryerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryer) EXPECT() *MockRepositoryerMockRecorder {
	return m.recorder
}

// DescBySWIP mocks base method.
func (m *MockRepositoryer) DescBySWIP(kws map[string]interface{}) []*maclist.MacAddrs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescBySWIP", kws)
	ret0, _ := ret[0].([]*maclist.MacAddrs)
	return ret0
}

// DescBySWIP indicates an expected call of DescBySWIP.
func (mr *MockRepositoryerMockRecorder) DescBySWIP(kws interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescBySWIP", reflect.TypeOf((*MockRepositoryer)(nil).DescBySWIP), kws)
}

// QueryByKws mocks base method.
func (m *MockRepositoryer) QueryByKws(arg0 map[string]interface{}, arg1, arg2 int) (uint64, []*maclist.MacList) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryByKws", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].([]*maclist.MacList)
	return ret0, ret1
}

// QueryByKws indicates an expected call of QueryByKws.
func (mr *MockRepositoryerMockRecorder) QueryByKws(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryByKws", reflect.TypeOf((*MockRepositoryer)(nil).QueryByKws), arg0, arg1, arg2)
}

// SaveARP mocks base method.
func (m *MockRepositoryer) SaveARP(arg0 []*maclist.ARPList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveARP", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveARP indicates an expected call of SaveARP.
func (mr *MockRepositoryerMockRecorder) SaveARP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveARP", reflect.TypeOf((*MockRepositoryer)(nil).SaveARP), arg0)
}

// SaveMac mocks base method.
func (m *MockRepositoryer) SaveMac(arg0 []*maclist.MacAddrs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMac", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMac indicates an expected call of SaveMac.
func (mr *MockRepositoryerMockRecorder) SaveMac(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMac", reflect.TypeOf((*MockRepositoryer)(nil).SaveMac), arg0)
}
